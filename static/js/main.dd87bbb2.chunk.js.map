{"version":3,"sources":["App.js","serviceWorker.js","index.js","yelp.png"],"names":["SamsungReactCard","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","App_CardHeader","image","App_CardBody","title","text","Component","CardHeader","style","backgroundImage","id","src","logo","alt","React","CardBody","href","Boolean","window","location","hostname","match","ReactDOM","render","App_SamsungReactCard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iPAGqBA,cACnB,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACXH,0EAGN,OACEO,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAACE,EAAD,CAAYC,MAAO,yEACnBL,EAAAC,EAAAC,cAACI,EAAD,CAAUC,MAAO,WAAYC,KAAM,iDARGC,aAaxCC,mLACK,IACCL,EAAUT,KAAKH,MAAfY,MACJM,EAAQ,CACRC,gBAAiB,OAASP,EAAQ,KAEtC,OACEL,EAAAC,EAAAC,cAAA,UAAQS,MAAOA,EAAOE,GAAIR,EAAOF,UAAU,eACzCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOW,IAAKC,IAAMC,IAAI,oBARpBC,IAAMR,WAazBS,mLAEF,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,kCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcP,KAAKH,MAAMc,OACtCP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBP,KAAKH,MAAMe,MACxCR,EAAAC,EAAAC,cAAA,KAAGiB,KAAK,4FAAR,0BAPeF,IAAMR,WAYRQ,IAAMR,UC7BPW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAAsBC,SAASC,eAAe,SD2HxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.dd87bbb2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SamsungReactCard.css'\nimport logo from './yelp.png';\nexport default class SamsungReactCard extends Component {\n  constructor(props){\n    super(props)\n  }\n  render() {\n    return (\n      <article className=\"card\" >\n        <CardHeader image={'https://s3-media2.fl.yelpcdn.com/bphoto/NfeFZQXrvH5r051M3Lr3uA/o.jpg'} />\n        <CardBody title={'DishDash'} text={'190 S Murphy Ave Sunnyvale, CA 94086'} />\n      </article>\n    )\n  }\n}\nclass CardHeader extends React.Component {\n  render() {\n    const { image } = this.props;\n    var style = { \n        backgroundImage: 'url(' + image + ')',\n    };\n    return (\n      <header style={style} id={image} className=\"card-header\">\n        <img className=\"logo\" src={logo} alt=\"My logo\" />\n      </header>\n    )\n  }\n}\nclass CardBody extends React.Component {\n  render() {\n    return (\n      <div className=\"card-body\">\n        <p className=\"category\"> Middle Eastern, Mediterranean</p> \n        <p className=\"body-title\">{this.props.title}</p>\n        <p className=\"body-content\">{this.props.text}</p>\n        <a href=\"intent://#Intent;scheme=yelp:///biz/tRiDMqAxeBERRvuyYPZ-aw;package=com.yelp.android;end;\"> More info... </a>\n      </div>\n    )\n  }\n}\nclass Button extends React.Component {\n  render() {\n    return (\n      <button className=\"button button-primary\">\n        <i className=\"fa fa-chevron-right\"></i> Show more ...\n      </button>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamsungReactCard from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SamsungReactCard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/yelp.3fcf854e.png\";"],"sourceRoot":""}